/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from "./routes/__root";
import { Route as UseReducerImport } from "./routes/useReducer";
import { Route as AppImport } from "./routes/app";
import { Route as AboutImport } from "./routes/about";
import { Route as IndexImport } from "./routes/index";
import { Route as PostIndexImport } from "./routes/post.index";
import { Route as PostPostIdImport } from "./routes/post.$postId";
import { Route as AppSettingsImport } from "./routes/app.settings";
import { Route as AppDashboardImport } from "./routes/app.dashboard";

// Create/Update Routes

const UseReducerRoute = UseReducerImport.update({
  id: "/useReducer",
  path: "/useReducer",
  getParentRoute: () => rootRoute,
} as any);

const AppRoute = AppImport.update({
  id: "/app",
  path: "/app",
  getParentRoute: () => rootRoute,
} as any);

const AboutRoute = AboutImport.update({
  id: "/about",
  path: "/about",
  getParentRoute: () => rootRoute,
} as any);

const IndexRoute = IndexImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => rootRoute,
} as any);

const PostIndexRoute = PostIndexImport.update({
  id: "/post/",
  path: "/post/",
  getParentRoute: () => rootRoute,
} as any);

const PostPostIdRoute = PostPostIdImport.update({
  id: "/post/$postId",
  path: "/post/$postId",
  getParentRoute: () => rootRoute,
} as any);

const AppSettingsRoute = AppSettingsImport.update({
  id: "/settings",
  path: "/settings",
  getParentRoute: () => AppRoute,
} as any);

const AppDashboardRoute = AppDashboardImport.update({
  id: "/dashboard",
  path: "/dashboard",
  getParentRoute: () => AppRoute,
} as any);

// Populate the FileRoutesByPath interface

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/": {
      id: "/";
      path: "/";
      fullPath: "/";
      preLoaderRoute: typeof IndexImport;
      parentRoute: typeof rootRoute;
    };
    "/about": {
      id: "/about";
      path: "/about";
      fullPath: "/about";
      preLoaderRoute: typeof AboutImport;
      parentRoute: typeof rootRoute;
    };
    "/app": {
      id: "/app";
      path: "/app";
      fullPath: "/app";
      preLoaderRoute: typeof AppImport;
      parentRoute: typeof rootRoute;
    };
    "/useReducer": {
      id: "/useReducer";
      path: "/useReducer";
      fullPath: "/useReducer";
      preLoaderRoute: typeof UseReducerImport;
      parentRoute: typeof rootRoute;
    };
    "/app/dashboard": {
      id: "/app/dashboard";
      path: "/dashboard";
      fullPath: "/app/dashboard";
      preLoaderRoute: typeof AppDashboardImport;
      parentRoute: typeof AppImport;
    };
    "/app/settings": {
      id: "/app/settings";
      path: "/settings";
      fullPath: "/app/settings";
      preLoaderRoute: typeof AppSettingsImport;
      parentRoute: typeof AppImport;
    };
    "/post/$postId": {
      id: "/post/$postId";
      path: "/post/$postId";
      fullPath: "/post/$postId";
      preLoaderRoute: typeof PostPostIdImport;
      parentRoute: typeof rootRoute;
    };
    "/post/": {
      id: "/post/";
      path: "/post";
      fullPath: "/post";
      preLoaderRoute: typeof PostIndexImport;
      parentRoute: typeof rootRoute;
    };
  }
}

// Create and export the route tree

interface AppRouteChildren {
  AppDashboardRoute: typeof AppDashboardRoute;
  AppSettingsRoute: typeof AppSettingsRoute;
}

const AppRouteChildren: AppRouteChildren = {
  AppDashboardRoute: AppDashboardRoute,
  AppSettingsRoute: AppSettingsRoute,
};

const AppRouteWithChildren = AppRoute._addFileChildren(AppRouteChildren);

export interface FileRoutesByFullPath {
  "/": typeof IndexRoute;
  "/about": typeof AboutRoute;
  "/app": typeof AppRouteWithChildren;
  "/useReducer": typeof UseReducerRoute;
  "/app/dashboard": typeof AppDashboardRoute;
  "/app/settings": typeof AppSettingsRoute;
  "/post/$postId": typeof PostPostIdRoute;
  "/post": typeof PostIndexRoute;
}

export interface FileRoutesByTo {
  "/": typeof IndexRoute;
  "/about": typeof AboutRoute;
  "/app": typeof AppRouteWithChildren;
  "/useReducer": typeof UseReducerRoute;
  "/app/dashboard": typeof AppDashboardRoute;
  "/app/settings": typeof AppSettingsRoute;
  "/post/$postId": typeof PostPostIdRoute;
  "/post": typeof PostIndexRoute;
}

export interface FileRoutesById {
  __root__: typeof rootRoute;
  "/": typeof IndexRoute;
  "/about": typeof AboutRoute;
  "/app": typeof AppRouteWithChildren;
  "/useReducer": typeof UseReducerRoute;
  "/app/dashboard": typeof AppDashboardRoute;
  "/app/settings": typeof AppSettingsRoute;
  "/post/$postId": typeof PostPostIdRoute;
  "/post/": typeof PostIndexRoute;
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths:
    | "/"
    | "/about"
    | "/app"
    | "/useReducer"
    | "/app/dashboard"
    | "/app/settings"
    | "/post/$postId"
    | "/post";
  fileRoutesByTo: FileRoutesByTo;
  to:
    | "/"
    | "/about"
    | "/app"
    | "/useReducer"
    | "/app/dashboard"
    | "/app/settings"
    | "/post/$postId"
    | "/post";
  id:
    | "__root__"
    | "/"
    | "/about"
    | "/app"
    | "/useReducer"
    | "/app/dashboard"
    | "/app/settings"
    | "/post/$postId"
    | "/post/";
  fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute;
  AboutRoute: typeof AboutRoute;
  AppRoute: typeof AppRouteWithChildren;
  UseReducerRoute: typeof UseReducerRoute;
  PostPostIdRoute: typeof PostPostIdRoute;
  PostIndexRoute: typeof PostIndexRoute;
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutRoute: AboutRoute,
  AppRoute: AppRouteWithChildren,
  UseReducerRoute: UseReducerRoute,
  PostPostIdRoute: PostPostIdRoute,
  PostIndexRoute: PostIndexRoute,
};

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/about",
        "/app",
        "/useReducer",
        "/post/$postId",
        "/post/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/about": {
      "filePath": "about.tsx"
    },
    "/app": {
      "filePath": "app.tsx",
      "children": [
        "/app/dashboard",
        "/app/settings"
      ]
    },
    "/useReducer": {
      "filePath": "useReducer.tsx"
    },
    "/app/dashboard": {
      "filePath": "app.dashboard.tsx",
      "parent": "/app"
    },
    "/app/settings": {
      "filePath": "app.settings.tsx",
      "parent": "/app"
    },
    "/post/$postId": {
      "filePath": "post.$postId.tsx"
    },
    "/post/": {
      "filePath": "post.index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
